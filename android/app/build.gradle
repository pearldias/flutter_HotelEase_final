plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"  // Updated for Kotlin plugin
    id 'com.google.gms.google-services' // For Firebase
    id "dev.flutter.flutter-gradle-plugin" // Flutter plugin must be applied after the Android and Kotlin plugins
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode", "1")
def flutterVersionName = localProperties.getProperty("flutter.versionName", "1.0")

android {
    namespace = "com.example.app"
    compileSdkVersion 34  // You can set this to a fixed SDK version like 33

    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 23  // Updated to API 23 as required by firebase_auth
        targetSdkVersion 33  // Targeting latest stable SDK
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // Configure multiDex if needed
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Replace with your release signing config (now using debug signing for testing)
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    // NDK (if you are using native code)
    ndkVersion = "23.1.7779620"
}

flutter {
    source = "../.."  // Flutter source directory
}

// Apply Google Services plugin for Firebase
apply plugin: 'com.google.gms.google-services'
